<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension="/" #>
<# string[] typeNames = new string[]{"Month", "Day", "Quarter", "Season", "Hour", "HalfHour", "QuarterHour"}; #>
<# string[] localVariableNames = typeNames.Select(typeName => LocalVariableName(typeName)).ToArray(); #>
<#
for (int i = 0; i < typeNames.Length; i++)
{
var typeName = typeNames[i];
var localVariableName = localVariableNames[i];
#>
#region License
// Copyright (c) 2019 Jake Fowler
//
// Permission is hereby granted, free of charge, to any person 
// obtaining a copy of this software and associated documentation 
// files (the "Software"), to deal in the Software without 
// restriction, including without limitation the rights to use, 
// copy, modify, merge, publish, distribute, sublicense, and/or sell 
// copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following 
// conditions:
//
// The above copyright notice and this permission notice shall be 
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
// OTHER DEALINGS IN THE SOFTWARE.
#endregion

// THIS FILE HAS BEEN AUTOMATICALLY GENERATED USING T4. DO NOT MODIFY AS ANY CHANGES WILL BE OVERWRITTEN.

using JetBrains.Annotations;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using System.Runtime.CompilerServices;

namespace Cmdty.TimePeriodValueTypes
{
	public readonly partial struct <#=typeName#>
    {
        private readonly int _value;

		#region Static Methods

        /// <summary>
        /// Adds a specified number of <#=localVariableName#>s to a <see cref="<#=typeName#>"/> instance.
        /// </summary>
        /// <param name="<#=localVariableName#>">The <#=localVariableName#> to add to.</param>
        /// <param name="numPeriods">The number of <#=localVariableName#>s added.</param>
        /// <returns>The <#=localVariableName#> <paramref name="numPeriods"/> number of <#=localVariableName#>s after <paramref name="<#=localVariableName#>"/>.</returns>
        /// <remarks>Note that <paramref name="numPeriods"/> can be positive or negative, with the returned
        /// <see cref="<#=typeName#>"/> being <paramref name="numPeriods"/> <#=localVariableName#>s after <paramref name="<#=localVariableName#>"/> if
        /// <paramref name="numPeriods"/> is positive, and the absolute value of <paramref name="numPeriods"/> <#=localVariableName#>s
        /// before <paramref name="<#=localVariableName#>"/> if <paramref name="numPeriods"/> is negative.</remarks>
        [Pure]
        public static <#=typeName#> Add(<#=typeName#> <#=localVariableName#>, int numPeriods) => <#=localVariableName#>.Offset(numPeriods);

        /// <summary>
        /// Subtracts a specified number of <#=localVariableName#>s from a <see cref="<#=typeName#>"/> instance.
        /// </summary>
        /// <param name="<#=localVariableName#>">The <#=localVariableName#> to subtract from.</param>
        /// <param name="numPeriods">The number of <#=localVariableName#>s subtracted.</param>
        /// <returns>The <#=localVariableName#> <paramref name="numPeriods"/> number of <#=localVariableName#>s before <paramref name="<#=localVariableName#>"/>.</returns>
        /// <remarks>Note that <paramref name="numPeriods"/> can be positive or negative, with the returned
        /// <see cref="<#=typeName#>"/> being <paramref name="numPeriods"/> <#=localVariableName#>s before <paramref name="<#=localVariableName#>"/> if <paramref name="numPeriods"/>
        /// is positive, and the absolute value of <paramref name="numPeriods"/> <#=localVariableName#>s after <paramref name="<#=localVariableName#>"/> if
        /// <paramref name="numPeriods"/> is negative.</remarks>
        [Pure]
        public static <#=typeName#> Subtract(<#=typeName#> <#=localVariableName#>, int numPeriods) => <#=localVariableName#>.Offset(-numPeriods);

        /// <summary>
        /// Subtracts one <see cref="<#=typeName#>"/> instance from another, returning the number of <#=localVariableName#>s difference.
        /// </summary>
        /// <param name="left">The <#=localVariableName#> being subtracted from.</param>
        /// <param name="right">The <#=localVariableName#> being subtracted.</param>
        /// <returns>The number of <#=localVariableName#>s that <paramref name="left"/> is after <paramref name="right"/>.</returns>
        /// <remarks>This will be a positive number if <paramref name="left"/> is later than <paramref name="right"/>,
        /// and negative if <paramref name="left"/> is earlier than <paramref name="right"/>.</remarks>
        [Pure]
        public static int Subtract(<#=typeName#> left, <#=typeName#> right) => left.OffsetFrom(right);

        #endregion Static Methods

		#region Instance Methods
		
		/// <summary>
        /// Returns the first instance of time period type <typeparamref name="T"/> which sits within the current instance.
        /// </summary>
        /// <typeparam name="T">The type of the time period being returns.</typeparam>
        /// <returns>The first instance of <typeparamref name="T"/> which sit within the <see cref="<#=typeName#>"/>
        /// represented by the current instance.</returns>
		public T First<T>() where T : ITimePeriod<T>
        {
            return TimePeriodHelper.First<<#=typeName#>, T>(this);
        }

		/// <summary>
        /// Returns the last instance of time period type <typeparamref name="T"/> which sits within the current instance.
        /// </summary>
        /// <typeparam name="T">The type of the time period being returns.</typeparam>
        /// <returns>The last instance of <typeparamref name="T"/> which sit within the <see cref="<#=typeName#>"/>
        /// represented by the current instance.</returns>
        public T Last<T>() where T : ITimePeriod<T>
        {
            return TimePeriodHelper.Last<<#=typeName#>, T>(this);
        }

		/// <summary>
        /// Expands the current instance into a collection of instances of a smaller time period type, which fit
        /// within the current instance.
        /// </summary>
        /// <typeparam name="T">The type of the time period being expanded to.</typeparam>
        /// <returns>A collection of all instances of <typeparamref name="T"/> which fit within the <see cref="<#=typeName#>"/>
        /// represented by the current instance.</returns>
        public IEnumerable<T> Expand<T>() where T : ITimePeriod<T>
        {
            return TimePeriodHelper.Expand<<#=typeName#>, T>(this);
        }

        /// <summary>
        /// Compares this instance with another <see cref="<#=typeName#>"/> and indicates whether this instance is
        /// earlier than, equal to, or later than the other instance.
        /// </summary>
        /// <param name="other">The <#=localVariableName#> being compared to.</param>
        /// <returns>A positive number if this instance is later than <paramref name="other"/>, zero if this instance is
        /// equal to <paramref name="other"/>, and a negative number if this instance is earlier than <paramref name="other"/>.
        /// </returns>
        [Pure]
        public int CompareTo(<#=typeName#> other)
        {
            // ReSharper disable once ImpureMethodCallOnReadonlyValueField
            return _value.CompareTo(other._value);
        }

        /// <summary>
        /// Compares this instance with another boxed <see cref="<#=typeName#>"/> and indicates whether this instance is
        /// earlier than, equal to, or later than the other instance.
        /// </summary>
        /// <remarks>Explicit interface implementation of the CompareTo method of the non-generic IComparable interface.
        /// The calling of this method should generally be avoided in favour of the CompareTo method with parameter of
        /// type <see cref="<#=typeName#>"/> as this is both type safe, and does not involve boxing of the instance being compared to.</remarks>
        /// <param name="obj">The object being compared to.</param>
        /// <returns>Integer returned (if <paramref name="obj"/> is non-null and of type <see cref="<#=typeName#>"/>)
        /// is a positive number if this instance is later than <paramref name="obj"/>, zero if this instance is
        /// equal to <paramref name="obj"/>, and a negative number if this instance is earlier than <paramref name="obj"/>.
        /// If <paramref name="obj"/> is null then this instance is considered later than <paramref name="obj"/>.</returns>
        /// <exception cref="ArgumentException"><paramref name="obj"/> is non-null and not of type <see cref="<#=typeName#>"/>.
        /// </exception>
        [Pure]
        int IComparable.CompareTo(object obj)
        {
            if (obj is null)
                return 1;
            if (!(obj is <#=typeName#> <#=localVariableName#>))
                throw new ArgumentException("Object must be of type AnotherTimePeriod.<#=typeName#>.", nameof(obj));
            return CompareTo(<#=localVariableName#>);
        }

        /// <summary>
        /// Evaluates equality with another <see cref="<#=typeName#>"/> instance.
        /// </summary>
        /// <param name="other">The <#=localVariableName#> being compared to.</param>
        /// <returns>True if <paramref name="other"/> represents the same <#=localVariableName#> as the current instance,
        /// false otherwise.</returns>
        [Pure]
        public bool Equals(<#=typeName#> other)
        {
            // ReSharper disable once ImpureMethodCallOnReadonlyValueField
            return _value.Equals(other._value);
        }

        /// <summary>
        /// Calculates the <see cref="<#=typeName#>"/> a specified number of <#=localVariableName#>s after or before the current instance.
        /// </summary>
        /// <param name="numPeriods">The number of <#=localVariableName#>s to offset the current instance by.</param>
        /// <returns>The <see cref="<#=typeName#>"/> equal to this instance offset by <paramref name="numPeriods"/>.</returns>
        /// <remarks>Note that <paramref name="numPeriods"/> can be positive or negative, with the returned
        /// <see cref="<#=typeName#>"/> being <paramref name="numPeriods"/> <#=localVariableName#>s after the current instance if <paramref name="numPeriods"/>
        /// is positive, and the absolute value of <paramref name="numPeriods"/> <#=localVariableName#>s before the current instance if
        /// <paramref name="numPeriods"/> is negative.</remarks>
        [Pure]
        public <#=typeName#> Offset(int numPeriods)
        {
            return new <#=typeName#>(_value + numPeriods);
        }

        /// <summary>
        /// Calculates the number of <#=localVariableName#>s difference between this instance and another <see cref="<#=typeName#>"/>.
        /// </summary>
        /// <param name="other">The <#=localVariableName#> the difference is calculated from.</param>
        /// <returns>The number of <#=localVariableName#>s difference between this instance and <paramref name="other"/>.</returns>
        /// <remarks>This will be a positive number if <paramref name="other"/> is earlier than, and negative if
        /// <paramref name="other"/> is after, the current instance.</remarks>
        [Pure]
        public int OffsetFrom(<#=typeName#> other)
        {
            return _value - other._value;
        }

        /// <inheritdoc/>
        [Pure]
        XmlSchema IXmlSerializable.GetSchema() => null;

        /// <inheritdoc/>
        void IXmlSerializable.ReadXml(XmlReader reader)
        {
            Preconditions.CheckParameterNotNull(reader, nameof(reader));
            string valueText = reader.ReadElementContentAsString();
            Unsafe.AsRef(this) = Parse(valueText);
        }

        /// <inheritdoc/>
        void IXmlSerializable.WriteXml(XmlWriter writer)
        {
            Preconditions.CheckParameterNotNull(writer, nameof(writer));
            writer.WriteString(ToString());
        }

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>A 32-bit signed integer hash code.</returns>
        [Pure]
        public override int GetHashCode()
        {
            // ReSharper disable once NonReadonlyMemberInGetHashCode
            return _value.GetHashCode();
        }

        /// <summary>
        /// Evaluates equality with another object.
        /// </summary>
        /// <param name="obj">The object being compared to.</param>
        /// <returns>True if <paramref name="obj"/> is of type <see cref="<#=typeName#>"/> and represents the same
        /// <#=localVariableName#> as the current instance, false otherwise.</returns>
        [Pure]
        public override bool Equals(object obj)
        {
            if (obj is <#=typeName#> <#=localVariableName#>)
                return Equals(<#=localVariableName#>);
            return false;
        }
		
        #endregion Instance Methods

		#region Operators
        /// <summary>
        /// Evaluates the equality of two <see cref="<#=typeName#>"/> instances.
        /// </summary>
        /// <param name="left">Left-hand side of the operator.</param>
        /// <param name="right">Right-hand side of the operator.</param>
        /// <returns>True if the two <see cref="<#=typeName#>"/> instances represent the same <#=localVariableName#>,
        /// false otherwise.</returns>
        public static bool operator ==(<#=typeName#> left, <#=typeName#> right) => left.Equals(right);

        /// <summary>
        /// Evaluates the inequality of two <see cref="<#=typeName#>"/> instances.
        /// </summary>
        /// <param name="left">Left-hand side of the operator.</param>
        /// <param name="right">Right-hand side of the operator.</param>
        /// <returns>True if the two <see cref="<#=typeName#>"/> instances represent different <#=localVariableName#>s,
        /// false otherwise.</returns>
        public static bool operator !=(<#=typeName#> left, <#=typeName#> right) => !left.Equals(right);

        /// <summary>
        /// Evaluates whether one <see cref="<#=typeName#>"/> instance is later than another.
        /// </summary>
        /// <param name="left">Left-hand side of the operator.</param>
        /// <param name="right">Right-hand side of the operator.</param>
        /// <returns>True if <paramref name="left"/> is later than <paramref name="right"/>, false otherwise.</returns>
        public static bool operator >(<#=typeName#> left, <#=typeName#> right) => left.CompareTo(right) > 0;

        /// <summary>
        /// Evaluates whether one <see cref="<#=typeName#>"/> instance is earlier than another.
        /// </summary>
        /// <param name="left">Left-hand side of the operator.</param>
        /// <param name="right">Right-hand side of the operator.</param>
        /// <returns>True if <paramref name="left"/> is earlier than <paramref name="right"/>, false otherwise.</returns>
        public static bool operator <(<#=typeName#> left, <#=typeName#> right) => left.CompareTo(right) < 0;

        /// <summary>
        /// Evaluates whether one <see cref="<#=typeName#>"/> instance is later than or equal to than another.
        /// </summary>
        /// <param name="left">Left-hand side of the operator.</param>
        /// <param name="right">Right-hand side of the operator.</param>
        /// <returns>True if <paramref name="left"/> is later than or equal to <paramref name="right"/>, false otherwise.</returns>
        public static bool operator >=(<#=typeName#> left, <#=typeName#> right) => left.CompareTo(right) >= 0;

        /// <summary>
        /// Evaluates whether one <see cref="<#=typeName#>"/> instance is earlier than or equal to another.
        /// </summary>
        /// <param name="left">Left-hand side of the operator.</param>
        /// <param name="right">Right-hand side of the operator.</param>
        /// <returns>True if <paramref name="left"/> is earlier than or equal to <paramref name="right"/>, false otherwise.</returns>
        public static bool operator <=(<#=typeName#> left, <#=typeName#> right) => left.CompareTo(right) <= 0;

        /// <summary>
        /// Adds a specified number of <#=localVariableName#>s to a <see cref="<#=typeName#>"/> instance.
        /// </summary>
        /// <param name="<#=localVariableName#>">The <#=localVariableName#> to add to.</param>
        /// <param name="numPeriods">The number of <#=localVariableName#>s added.</param>
        /// <returns>The <#=localVariableName#> <paramref name="numPeriods"/> number of <#=localVariableName#>s after <paramref name="<#=localVariableName#>"/>.</returns>
        /// <remarks>Note that <paramref name="numPeriods"/> can be positive or negative, with the returned
        /// <see cref="<#=typeName#>"/> being <paramref name="numPeriods"/> <#=localVariableName#>s after <paramref name="<#=localVariableName#>"/> if
        /// <paramref name="numPeriods"/> is positive, and the absolute value of <paramref name="numPeriods"/> <#=localVariableName#>s
        /// before <paramref name="<#=localVariableName#>"/> if <paramref name="numPeriods"/> is negative.</remarks>
        public static <#=typeName#> operator +(<#=typeName#> <#=localVariableName#>, int numPeriods) => Add(<#=localVariableName#>, numPeriods);

        /// <summary>
        /// Subtracts a specified number of <#=localVariableName#>s from a <see cref="<#=typeName#>"/> instance.
        /// </summary>
        /// <param name="<#=localVariableName#>">The <#=localVariableName#> to subtract from.</param>
        /// <param name="numPeriods">The number of <#=localVariableName#>s subtracted.</param>
        /// <returns>The <#=localVariableName#> <paramref name="numPeriods"/> number of <#=localVariableName#>s before <paramref name="<#=localVariableName#>"/>.</returns>
        /// <remarks>Note that <paramref name="numPeriods"/> can be positive or negative, with the returned
        /// <see cref="<#=typeName#>"/> being <paramref name="numPeriods"/> <#=localVariableName#>s before <paramref name="<#=localVariableName#>"/> if <paramref name="numPeriods"/>
        /// is positive, and the absolute value of <paramref name="numPeriods"/> <#=localVariableName#>s after <paramref name="<#=localVariableName#>"/> if
        /// <paramref name="numPeriods"/> is negative.</remarks>
        public static <#=typeName#> operator -(<#=typeName#> <#=localVariableName#>, int numPeriods) => Subtract(<#=localVariableName#>, numPeriods);

        /// <summary>
        /// Subtracts one <see cref="<#=typeName#>"/> instance from another, returning the number of <#=localVariableName#>s difference.
        /// </summary>
        /// <param name="left">Left-hand side of the operator.</param>
        /// <param name="right">Right-hand side of the operator.</param>
        /// <returns>The number of <#=localVariableName#>s that <paramref name="left"/> is after <paramref name="right"/>.</returns>
        /// <remarks>This will be a positive number if <paramref name="left"/> is later than <paramref name="right"/>,
        /// and negative if <paramref name="left"/> is earlier than <paramref name="right"/>.</remarks>
        public static int operator -(<#=typeName#> left, <#=typeName#> right) => Subtract(left, right);

        /// <summary>
        /// Increments a <see cref="<#=typeName#>"/> instance by one <#=localVariableName#>.
        /// </summary>
        /// <param name="<#=localVariableName#>">The <#=localVariableName#> being incremented.</param>
        /// <returns>The <#=localVariableName#> immediately following <paramref name="<#=localVariableName#>"/>.</returns>
        public static <#=typeName#> operator ++(<#=typeName#> <#=localVariableName#>) => <#=localVariableName#>.Offset(1);

        /// <summary>
        /// Decrements a <see cref="<#=typeName#>"/> instance by one <#=localVariableName#>.
        /// </summary>
        /// <param name="<#=localVariableName#>">The <#=localVariableName#> being decremented.</param>
        /// <returns>The <#=localVariableName#> immediately preceding <paramref name="<#=localVariableName#>"/>.</returns>
        public static <#=typeName#> operator --(<#=typeName#> <#=localVariableName#>) => <#=localVariableName#>.Offset(-1);

        #endregion
		
	}
}
<#
SaveOutput(typeName + ".Generated.cs");
}
#>

<#+
string LocalVariableName(string typeName)
{
	return Char.ToLowerInvariant(typeName[0]) + typeName.Substring(1);
}
#>

<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>